/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rdfviewer;

import java.io.File;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import org.apache.jena.atlas.io.IndentedWriter;
import org.apache.jena.query.Query;
import org.apache.jena.query.QueryExecution;
import org.apache.jena.query.QueryExecutionFactory;
import org.apache.jena.query.QueryFactory;
import org.apache.jena.query.QuerySolution;
import org.apache.jena.query.ResultSet;
import org.apache.jena.rdf.model.InfModel;
import org.apache.jena.rdf.model.Model;
import org.apache.jena.rdf.model.ModelFactory;
import org.apache.jena.rdf.model.Property;
import org.apache.jena.rdf.model.RDFNode;
import org.apache.jena.rdf.model.Resource;
import org.apache.jena.rdf.model.Statement;
import org.apache.jena.rdf.model.StmtIterator;
import org.apache.jena.util.FileManager;

/**
 *
 * @author omn1
 */
public class MainFrame extends javax.swing.JFrame {

    private File rdfFile;
    private String rdfPath;
    private Model model;
    ArrayList<String> depts;
    ArrayList<String> deptsURIs;
    ArrayList<String> profs;
    ArrayList<String> profsURIs;

    /**
     * Creates new form NewJFrame
     */
    public MainFrame() {
        initComponents();
        this.setTitle("RDFviewer");
    }

    public File getRdfFile() {
        return rdfFile;
    }

    public void setRdfFile(File rdfFile) {
        this.rdfFile = rdfFile;
    }

    public Model getModel() {
        return model;
    }

    public void setModel(Model model) {
        this.model = model;
    }

    public String getRdfPath() {
        return rdfPath;
    }

    public void setRdfPath(String rdfPath) {
        this.rdfPath = rdfPath;
    }

    public ArrayList<String> getDepts() {
        return depts;
    }

    public void setDepts(ArrayList<String> depts) {
        this.depts = depts;
    }

    public ArrayList<String> getDeptsURIs() {
        return deptsURIs;
    }

    public void setDeptsURIs(ArrayList<String> deptsURIs) {
        this.deptsURIs = deptsURIs;
    }

    public ArrayList<String> getProfs() {
        return profs;
    }

    public void setProfs(ArrayList<String> profs) {
        this.profs = profs;
    }

    public ArrayList<String> getProfsURIs() {
        return profsURIs;
    }

    public void setProfsURIs(ArrayList<String> profsURIs) {
        this.profsURIs = profsURIs;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        stuffTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        departmentsSelection = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        uriTable = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        uriLabel = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        pathLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFileButton = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        addStudentBtn = new javax.swing.JMenuItem();
        addProfBtn = new javax.swing.JMenuItem();
        addDeptBtn = new javax.swing.JMenuItem();
        addLessonBtn = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        stuffTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Age", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(stuffTable);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        jLabel1.setText("Search Departments Stuff:");

        jLabel2.setText("Department:");

        departmentsSelection.setToolTipText("Select department..");
        departmentsSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                departmentsSelectionItemStateChanged(evt);
            }
        });
        departmentsSelection.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                departmentsSelectionMouseClicked(evt);
            }
        });
        departmentsSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                departmentsSelectionActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 0, 15)); // NOI18N
        jLabel3.setText("Search Triples:");

        uriTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Subject", "Predicate", "Object"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(uriTable);

        jLabel4.setText("URI:");

        uriLabel.setText("Enter URI...");
        uriLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uriLabelActionPerformed(evt);
            }
        });

        searchBtn.setText("Search URI");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        jLabel5.setText("File:");

        pathLabel.setText("No file selected...");

        jButton1.setText("Refresh Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        openFileButton.setText("Open RDF file..");
        openFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileButtonActionPerformed(evt);
            }
        });
        fileMenu.add(openFileButton);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Add");

        addStudentBtn.setText("Student");
        addStudentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStudentBtnActionPerformed(evt);
            }
        });
        jMenu3.add(addStudentBtn);

        addProfBtn.setText("Professor");
        addProfBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProfBtnActionPerformed(evt);
            }
        });
        jMenu3.add(addProfBtn);

        addDeptBtn.setText("Department");
        addDeptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeptBtnActionPerformed(evt);
            }
        });
        jMenu3.add(addDeptBtn);

        addLessonBtn.setText("Lesson");
        addLessonBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLessonBtnActionPerformed(evt);
            }
        });
        jMenu3.add(addLessonBtn);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(departmentsSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 733, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(uriLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchBtn))
                            .addComponent(jSeparator3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(departmentsSelection, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel3)
                .addGap(5, 5, 5)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchBtn, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(uriLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 169, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathLabel)
                    .addComponent(jLabel5))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed

        //open file chooser and add filter for rdf files
        JFileChooser fileChooser = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        FileNameExtensionFilter filter = new FileNameExtensionFilter("rdf", "RDF");
        fileChooser.setFileFilter(filter);

        int returnValue = fileChooser.showOpenDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            //get the selected file
            File selectedFile = fileChooser.getSelectedFile();

            //save file path and file
            this.setRdfPath(selectedFile.getAbsolutePath());
            this.setRdfFile(selectedFile);
            pathLabel.setText(selectedFile.getAbsolutePath());

            //create a model and save it
            this.setModel(ModelFactory.createDefaultModel());

            Model model = this.getModel();
            InputStream in = FileManager.get().open(selectedFile.getAbsolutePath());

            model.read(in, "");
            model.write(System.out);
            getDepartments();

        }
    }//GEN-LAST:event_openFileButtonActionPerformed

    private void departmentsSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_departmentsSelectionItemStateChanged

    }//GEN-LAST:event_departmentsSelectionItemStateChanged

    private void departmentsSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_departmentsSelectionActionPerformed
        try {
            String selectedValue = departmentsSelection.getSelectedItem().toString();
            System.out.println(selectedValue);

            getStuff(selectedValue);
        } catch (Exception e) {
            return;
        }
    }//GEN-LAST:event_departmentsSelectionActionPerformed

    private void uriLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uriLabelActionPerformed
    }//GEN-LAST:event_uriLabelActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        //get uri from user input
        String URI = uriLabel.getText();
        System.out.print(URI);

        //create inf model
        InfModel infmodel = ModelFactory.createRDFSModel(this.model);

        // list the statements in the Model
        StmtIterator iter = infmodel.listStatements();

        //set table to display results - remove first all contents
        DefaultTableModel tableModel = (DefaultTableModel) uriTable.getModel();
        tableModel.getDataVector().removeAllElements();

        //print out the predicate, subject and object of each statement
        while (iter.hasNext()) {
            Statement stmt = iter.nextStatement();    // get next statement
            Resource subject = stmt.getSubject();     // get the subject
            Property predicate = stmt.getPredicate(); // get the predicate
            RDFNode object = stmt.getObject();        // get the object

            String subjectURI = subject.toString();
            System.out.println(subjectURI + " " + predicate + " " + object);

            //if user subject is the same with this statements uri add it to table
            if (subjectURI.equals(URI)) {
                Vector row = new Vector();
                row.add(subjectURI);
                row.add(predicate.toString());

                row.add(object.toString());
                tableModel.addRow(row);
            }

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void addStudentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStudentBtnActionPerformed

        CreatePersonForm createStudent = new CreatePersonForm("student", this.model, this.rdfPath, this.depts, this.deptsURIs);
        createStudent.setVisible(true);

        System.out.println(createStudent.getTitle() + " " + createStudent.getName());
    }//GEN-LAST:event_addStudentBtnActionPerformed

    private void addProfBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProfBtnActionPerformed
        // TODO add your handling code here:
        new CreatePersonForm("professor", this.model, this.rdfPath, this.depts, this.deptsURIs).setVisible(true);
        refreshModel();

    }//GEN-LAST:event_addProfBtnActionPerformed

    private void addDeptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeptBtnActionPerformed
        // TODO add your handling code here:
        new CreateDeptForm(this.model, this.rdfPath).setVisible(true);
    }//GEN-LAST:event_addDeptBtnActionPerformed

    private void addLessonBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLessonBtnActionPerformed
        // TODO add your handling code here:
        new CreateLessonForm(this.model, this.rdfPath, this.profs, this.profsURIs).setVisible(true);
    }//GEN-LAST:event_addLessonBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        refreshModel();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void departmentsSelectionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_departmentsSelectionMouseClicked
        // TODO add your handling code here:
        String selectedValue = departmentsSelection.getSelectedItem().toString();
        System.out.println("Clicked" + selectedValue);

        getStuff(selectedValue);
    }//GEN-LAST:event_departmentsSelectionMouseClicked

    private void refreshModel() {
        this.setModel(ModelFactory.createDefaultModel());

        Model model = this.getModel();
        InputStream in = FileManager.get().open(this.rdfPath);

        model.read(in, "");
        model.write(System.out);

        departmentsSelection.removeAllItems();
        stuffTable.removeAll();

        getDepartments();

    }

    private void getStuff(String dept) {
        //get departments stuff

        //get model
        Model model = this.getModel();

        //query string for all persons
//        String queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"
//                + "PREFIX uni: <http://www.university.fake/university#>  PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
//                + "SELECT  ?name ?age ?phone \n"
//                + "WHERE {\n"
//                + "    ?x uni:has_name ?name.\n"
//                + "    ?x uni:has_phone ?phone.\n"
//                + "    ?x uni:has_age ?age.\n"
//                + "    ?x uni:member_of ?dept.\n"
//                + "    ?dept uni:dep_name '" + dept + "'\n"
//                + "    }";
//query for professors only
        String queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX uni: <http://www.university.fake/university#>  PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                + "SELECT  ?name ?age ?phone \n"
                + "WHERE {\n"
                + "    ?x rdf:type uni:Professor.\n"
                + "    ?x uni:has_name ?name.\n"
                + "    ?x uni:has_phone ?phone.\n"
                + "    ?x uni:has_age ?age.\n"
                + "    ?x uni:member_of ?dept.\n"
                + "    ?dept uni:dep_name '" + dept + "'\n"
                + "    }";

        //create a query factory
        Query query = QueryFactory.create(queryString);

        //print query to cmd
        query.serialize(new IndentedWriter(System.out, true));

        //execute query
        QueryExecution qexec = QueryExecutionFactory.create(query, model);
        ResultSet rs = qexec.execSelect();

        ArrayList<String> stuff = new ArrayList<String>();
        DefaultTableModel tableModel = (DefaultTableModel) stuffTable.getModel();
        tableModel.getDataVector().removeAllElements();

        for (; rs.hasNext();) {

            //add to table
            QuerySolution rb = rs.nextSolution();
            String name = rb.get("name").toString();
            String age = rb.get("age").toString();
            String phone = rb.get("phone").toString();

            System.out.println(name + "-" + age + "-" + phone);

            Vector row = new Vector();
            row.add(name);
            row.add(age);
            row.add(phone);
            tableModel.addRow(row);
        }

    }

    private void getDepartments() {

        Model model = this.getModel();

        String queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX uni: <http://www.university.fake/university#>  PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                + "SELECT  ?name ?dept \n"
                + "WHERE {\n"
                + "    ?name rdf:type uni:Department.\n"
                + "    ?name uni:dep_name ?dept \n"
                + "    }";

        Query query = QueryFactory.create(queryString);
        query.serialize(new IndentedWriter(System.out, true));
        QueryExecution qexec = QueryExecutionFactory.create(query, model);
        ResultSet rs = qexec.execSelect();

        ArrayList<String> depts = new ArrayList<String>();
        ArrayList<String> deptsURIs = new ArrayList<String>();

        for (; rs.hasNext();) {
            QuerySolution rb = rs.nextSolution();
            RDFNode x = rb.get("dept");
            depts.add(x.toString());
            deptsURIs.add(rb.get("name").toString());
        }

        System.out.print(depts);
        System.out.print(deptsURIs);

        departmentsSelection.addItem("Select Department..");

        this.setDepts(depts);
        this.setDeptsURIs(deptsURIs);

        for (String value : depts) {
            departmentsSelection.addItem(value);
        }

        queryString = "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n"
                + "PREFIX uni: <http://www.university.fake/university#>  PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n"
                + "SELECT  ?uri ?name \n"
                + "WHERE {\n"
                + "    ?uri rdf:type uni:Professor.\n"
                + "    ?uri uni:has_name ?name \n"
                + "    }";

        query = QueryFactory.create(queryString);
        query.serialize(new IndentedWriter(System.out, true));
        qexec = QueryExecutionFactory.create(query, model);
        rs = qexec.execSelect();

        ArrayList<String> profs = new ArrayList<String>();
        ArrayList<String> profsURIs = new ArrayList<String>();

        for (; rs.hasNext();) {
            QuerySolution rb = rs.nextSolution();
            RDFNode x = rb.get("name");
            profs.add(x.toString());
            profsURIs.add(rb.get("uri").toString());
        }

        this.setProfs(profs);
        this.setProfsURIs(profsURIs);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame mainFrame = new MainFrame();
                mainFrame.setVisible(true);
                mainFrame.setResizable(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addDeptBtn;
    private javax.swing.JMenuItem addLessonBtn;
    private javax.swing.JMenuItem addProfBtn;
    private javax.swing.JMenuItem addStudentBtn;
    private javax.swing.JComboBox<String> departmentsSelection;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JMenuItem openFileButton;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTable stuffTable;
    private javax.swing.JTextField uriLabel;
    private javax.swing.JTable uriTable;
    // End of variables declaration//GEN-END:variables
}
